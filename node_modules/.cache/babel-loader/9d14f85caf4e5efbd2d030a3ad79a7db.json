{"ast":null,"code":"import _toConsumableArray from \"D:\\\\projects\\\\react\\\\React-Shopping-Cart\\\\Shopping-Cart\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"D:\\\\projects\\\\react\\\\React-Shopping-Cart\\\\Shopping-Cart\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"D:\\\\projects\\\\react\\\\React-Shopping-Cart\\\\Shopping-Cart\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\projects\\\\react\\\\React-Shopping-Cart\\\\Shopping-Cart\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { ADD_TO_CART, REMOVE_ITEM, SUB_QUANTITY, ADD_QUANTITY, // ADD_SHIPPING,\nCHANGE_FILTER, ON_INIT_FUNCTION } from \"./action-types/cart-actions\"; //add cart action\n\nexport var initFunction = function initFunction() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                dispatch({\n                  type: ON_INIT_FUNCTION\n                });\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var changeFilter = function changeFilter(value, selectedValue) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch, getState) {\n        var state, filteredProducts;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                state = getState();\n                filteredProducts = [];\n\n                if (value.length > 0 || selectedValue.length > 0) {\n                  filteredProducts = state.items.filter(function (each) {\n                    if (selectedValue !== \"select_Department\") {\n                      console.log(\"we are here foo12\");\n                      return each.title.includes(value) && each.dep.includes(selectedValue);\n                    } else {\n                      console.log(\"ta7t\");\n                      return each.title.includes(value);\n                    }\n                  });\n                } else {\n                  filteredProducts = state.items;\n                }\n\n                dispatch({\n                  type: CHANGE_FILTER,\n                  filteredProducts: filteredProducts\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var addToCart = function addToCart(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch, getState) {\n        var state, addedItem, existed_item, priceAfterDiscount, newTotal;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                state = getState();\n                addedItem = state.items.find(function (item) {\n                  return item.id === id;\n                }); //check if the action id exists in the addedItems\n\n                existed_item = state.addedItems.find(function (item) {\n                  return id === item.id;\n                });\n                priceAfterDiscount = addedItem.price;\n\n                if (addedItem.activeDiscount) {\n                  priceAfterDiscount = addedItem.price - addedItem.price * addedItem.discount / 100;\n                }\n\n                if (existed_item) {\n                  addedItem.quantity += 1;\n                  dispatch(_objectSpread({\n                    type: ADD_TO_CART\n                  }, state, {\n                    total: state.total + priceAfterDiscount\n                  }));\n                } else {\n                  addedItem.quantity = 1;\n                  newTotal = state.total + priceAfterDiscount;\n                  dispatch({\n                    type: ADD_TO_CART,\n                    addedItems: _toConsumableArray(state.addedItems).concat([addedItem]),\n                    total: newTotal\n                  });\n                }\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x5, _x6) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n}; //remove item action\n\nexport var removeItem = function removeItem(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(dispatch, getState) {\n        var state, itemToRemove, new_items, priceAfterDiscount, newTotal;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                state = getState();\n                itemToRemove = state.addedItems.find(function (item) {\n                  return id === item.id;\n                });\n                new_items = state.addedItems.filter(function (item) {\n                  return id !== item.id;\n                });\n                priceAfterDiscount = itemToRemove.price;\n\n                if (itemToRemove.activeDiscount) {\n                  priceAfterDiscount = itemToRemove.price - itemToRemove.price * itemToRemove.discount / 100;\n                } //calculating the total\n\n\n                newTotal = state.total - priceAfterDiscount * itemToRemove.quantity;\n                dispatch({\n                  type: REMOVE_ITEM,\n                  addedItems: new_items,\n                  total: newTotal\n                });\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x7, _x8) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  );\n}; //subtract qt action\n\nexport var subtractQuantity = function subtractQuantity(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(dispatch, getState) {\n        var state, new_items, newTotal, addedItem, priceAfterDiscount;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                state = getState();\n                new_items = [];\n                newTotal = 0;\n                addedItem = state.items.find(function (item) {\n                  return item.id === id;\n                }); //if the qt == 0 then it should be removed\n\n                priceAfterDiscount = addedItem.price;\n\n                if (addedItem.activeDiscount) {\n                  priceAfterDiscount = addedItem.price - addedItem.price * addedItem.discount / 100;\n                }\n\n                if (addedItem.quantity === 1) {\n                  new_items = state.addedItems.filter(function (item) {\n                    return item.id !== id;\n                  });\n                  newTotal = state.total - priceAfterDiscount;\n                } else {\n                  addedItem.quantity -= 1;\n                  new_items = state.addedItems;\n                  newTotal = state.total - priceAfterDiscount;\n                }\n\n                dispatch(_objectSpread({\n                  type: SUB_QUANTITY\n                }, state, {\n                  addedItems: new_items,\n                  addedtotal: newTotal\n                }));\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x9, _x10) {\n        return _ref5.apply(this, arguments);\n      };\n    }()\n  );\n}; //add qt action\n\nexport var addQuantity = function addQuantity(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref6 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(dispatch, getState) {\n        var state, addedItem, priceAfterDiscount, newTotal;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                state = getState();\n                addedItem = state.items.find(function (item) {\n                  return item.id === id;\n                });\n                addedItem.quantity += 1;\n                priceAfterDiscount = addedItem.price;\n\n                if (addedItem.activeDiscount) {\n                  priceAfterDiscount = addedItem.price - addedItem.price * addedItem.discount / 100;\n                }\n\n                newTotal = state.total + priceAfterDiscount;\n                dispatch({\n                  type: ADD_QUANTITY,\n                  newTotal: newTotal\n                });\n\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x11, _x12) {\n        return _ref6.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["D:\\projects\\react\\React-Shopping-Cart\\Shopping-Cart\\src\\components\\actions\\cartActions.js"],"names":["ADD_TO_CART","REMOVE_ITEM","SUB_QUANTITY","ADD_QUANTITY","CHANGE_FILTER","ON_INIT_FUNCTION","initFunction","dispatch","getState","type","changeFilter","value","selectedValue","state","filteredProducts","length","items","filter","each","console","log","title","includes","dep","addToCart","id","addedItem","find","item","existed_item","addedItems","priceAfterDiscount","price","activeDiscount","discount","quantity","total","newTotal","removeItem","itemToRemove","new_items","subtractQuantity","addedtotal","addQuantity"],"mappings":"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","sourcesContent":["import {\r\n  ADD_TO_CART,\r\n  REMOVE_ITEM,\r\n  SUB_QUANTITY,\r\n  ADD_QUANTITY,\r\n  // ADD_SHIPPING,\r\n  CHANGE_FILTER,\r\n  ON_INIT_FUNCTION,\r\n} from \"./action-types/cart-actions\";\r\n\r\n//add cart action\r\nexport const initFunction = () => {\r\n  return async (dispatch, getState) => {\r\n    dispatch({\r\n      type: ON_INIT_FUNCTION,\r\n    });\r\n  };\r\n};\r\nexport const changeFilter = (value, selectedValue) => {\r\n  return async (dispatch, getState) => {\r\n    const state = getState();\r\n    let filteredProducts = [];\r\n\r\n    if (value.length > 0 || selectedValue.length > 0) {\r\n      filteredProducts = state.items.filter((each) => {\r\n        if (selectedValue !== \"select_Department\") {\r\n          console.log(\"we are here foo12\");\r\n          return each.title.includes(value) && each.dep.includes(selectedValue);\r\n        } else {\r\n          console.log(\"ta7t\");\r\n          return each.title.includes(value);\r\n        }\r\n      });\r\n    } else {\r\n      filteredProducts = state.items;\r\n    }\r\n\r\n    dispatch({\r\n      type: CHANGE_FILTER,\r\n      filteredProducts: filteredProducts,\r\n    });\r\n  };\r\n};\r\nexport const addToCart = (id) => {\r\n  return async (dispatch, getState) => {\r\n    const state = getState();\r\n\r\n    let addedItem = state.items.find((item) => item.id === id);\r\n    //check if the action id exists in the addedItems\r\n    let existed_item = state.addedItems.find((item) => id === item.id);\r\n    let priceAfterDiscount = addedItem.price;\r\n    if (addedItem.activeDiscount) {\r\n      priceAfterDiscount =\r\n        addedItem.price - (addedItem.price * addedItem.discount) / 100;\r\n    }\r\n    if (existed_item) {\r\n      addedItem.quantity += 1;\r\n      dispatch({\r\n        type: ADD_TO_CART,\r\n        ...state,\r\n        total: state.total + priceAfterDiscount,\r\n      });\r\n    } else {\r\n      addedItem.quantity = 1;\r\n      let newTotal = state.total + priceAfterDiscount;\r\n      dispatch({\r\n        type: ADD_TO_CART,\r\n        addedItems: [...state.addedItems, addedItem],\r\n        total: newTotal,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\n//remove item action\r\nexport const removeItem = (id) => {\r\n  return async (dispatch, getState) => {\r\n    const state = getState();\r\n    let itemToRemove = state.addedItems.find((item) => id === item.id);\r\n    let new_items = state.addedItems.filter((item) => id !== item.id);\r\n    let priceAfterDiscount = itemToRemove.price;\r\n    if (itemToRemove.activeDiscount) {\r\n      priceAfterDiscount =\r\n        itemToRemove.price - (itemToRemove.price * itemToRemove.discount) / 100;\r\n    }\r\n    //calculating the total\r\n    let newTotal = state.total - priceAfterDiscount * itemToRemove.quantity;\r\n\r\n    dispatch({\r\n      type: REMOVE_ITEM,\r\n      addedItems: new_items,\r\n      total: newTotal,\r\n    });\r\n  };\r\n};\r\n//subtract qt action\r\nexport const subtractQuantity = (id) => {\r\n  return async (dispatch, getState) => {\r\n    const state = getState();\r\n    let new_items = [];\r\n    let newTotal = 0;\r\n    let addedItem = state.items.find((item) => item.id === id);\r\n    //if the qt == 0 then it should be removed\r\n    let priceAfterDiscount = addedItem.price;\r\n    if (addedItem.activeDiscount) {\r\n      priceAfterDiscount =\r\n        addedItem.price - (addedItem.price * addedItem.discount) / 100;\r\n    }\r\n    if (addedItem.quantity === 1) {\r\n      new_items = state.addedItems.filter((item) => item.id !== id);\r\n\r\n      newTotal = state.total - priceAfterDiscount;\r\n    } else {\r\n      addedItem.quantity -= 1;\r\n      new_items = state.addedItems;\r\n      newTotal = state.total - priceAfterDiscount;\r\n    }\r\n    dispatch({\r\n      type: SUB_QUANTITY,\r\n      ...state,\r\n      addedItems: new_items,\r\n      addedtotal: newTotal,\r\n    });\r\n  };\r\n};\r\n//add qt action\r\nexport const addQuantity = (id) => {\r\n  return async (dispatch, getState) => {\r\n    const state = getState();\r\n    let addedItem = state.items.find((item) => item.id === id);\r\n    addedItem.quantity += 1;\r\n    let priceAfterDiscount = addedItem.price;\r\n    if (addedItem.activeDiscount) {\r\n      priceAfterDiscount =\r\n        addedItem.price - (addedItem.price * addedItem.discount) / 100;\r\n    }\r\n    let newTotal = state.total + priceAfterDiscount;\r\n    dispatch({ type: ADD_QUANTITY, newTotal: newTotal });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}